/** Simulating a mutable referenced cell with an integer, modifiable and
  * readable by a setter and a getter.
  *
  * EXPECT: "42"
  */


public `cell`: Run[Int, Chan[Fun[Unit, Int]], Chan[Fun[Int, Unit]]]

contract `cell`(init, retGet, retSet) {
  new s: Chan[Int], get: Fun[Unit, Int], set: Fun[Int, Unit] {
    s ! (init) |
    function set(x) = s ? (_old) { s ! (x) | () } |
    retSet ! (set) |
    function get(_u) = s ? (v) { s ! (v) | v } |
    retGet ! (get)
  }
}

public `increase_cell_value_by_amount`: Fun[
  Fun[Unit, Int],
  Fun[Int, Unit],
  Int,
  Unit
]

function `increase_cell_value_by_amount`(get, set, amount) = {
  set(get(()) + amount)
}

new
  retGet: Chan[Fun[Unit, Int]],
  retSet: Chan[Fun[Int, Unit]]
{
  `cell`(35, retGet, retSet) |

  retGet ? (getter) {
    retSet ? (setter) {
      `/sys/out` ! (`/lang/int_to_string`(getter(
        `increase_cell_value_by_amount`(getter, setter, 7))
      ))
    }
  }
}
